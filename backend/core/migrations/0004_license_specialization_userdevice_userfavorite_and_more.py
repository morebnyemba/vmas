# Generated by Django 5.1.7 on 2025-04-04 02:01

import django.db.models.deletion
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0003_alter_agency_options_alter_user_options_and_more'),
        ('properties', '0006_remove_propertyimage_processing_status_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=100, verbose_name='License Number')),
                ('type', models.CharField(choices=[('sales', 'Sales License'), ('broker', 'Broker License'), ('appraiser', 'Appraiser License')], max_length=20, verbose_name='License Type')),
                ('state', models.CharField(max_length=100, verbose_name='Issuing State')),
                ('expiry_date', models.DateField(verbose_name='Expiry Date')),
                ('verified', models.BooleanField(default=False, verbose_name='Verified')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Verified At')),
                ('document', models.FileField(blank=True, null=True, upload_to='licenses/', verbose_name='License Document')),
            ],
            options={
                'ordering': ['-expiry_date'],
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(max_length=255, verbose_name='Device Name')),
                ('device_type', models.CharField(max_length=100, verbose_name='Device Type')),
                ('os', models.CharField(max_length=100, verbose_name='Operating System')),
                ('browser', models.CharField(max_length=100, verbose_name='Browser')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('last_used', models.DateTimeField(verbose_name='Last Used')),
                ('is_trusted', models.BooleanField(default=False, verbose_name='Trusted Device')),
            ],
            options={
                'verbose_name': 'User Device',
                'verbose_name_plural': 'User Devices',
            },
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_parameters', models.JSONField(blank=True, null=True, verbose_name='Search Parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'User Favorite',
                'verbose_name_plural': 'User Favorites',
            },
        ),
        migrations.RemoveField(
            model_name='loginhistory',
            name='user',
        ),
        migrations.RemoveField(
            model_name='user',
            name='company_name',
        ),
        migrations.RemoveField(
            model_name='user',
            name='deactivation_date',
        ),
        migrations.RemoveField(
            model_name='user',
            name='deactivation_reason',
        ),
        migrations.RemoveField(
            model_name='user',
            name='is_company_member',
        ),
        migrations.RemoveField(
            model_name='user',
            name='position',
        ),
        migrations.RemoveField(
            model_name='user',
            name='privacy_policy_accepted',
        ),
        migrations.RemoveField(
            model_name='user',
            name='privacy_policy_accepted_at',
        ),
        migrations.RemoveField(
            model_name='user',
            name='terms_accepted',
        ),
        migrations.RemoveField(
            model_name='user',
            name='terms_accepted_at',
        ),
        migrations.AddField(
            model_name='agency',
            name='address',
            field=models.TextField(blank=True, null=True, verbose_name='Address'),
        ),
        migrations.AddField(
            model_name='agency',
            name='founded_date',
            field=models.DateField(blank=True, null=True, verbose_name='Founded Date'),
        ),
        migrations.AddField(
            model_name='agency',
            name='languages',
            field=models.JSONField(blank=True, default=list, verbose_name='Languages Spoken'),
        ),
        migrations.AddField(
            model_name='agency',
            name='latitude',
            field=models.FloatField(blank=True, null=True, verbose_name='Latitude'),
        ),
        migrations.AddField(
            model_name='agency',
            name='logo',
            field=models.ImageField(blank=True, null=True, upload_to='agency_logos/', verbose_name='Logo'),
        ),
        migrations.AddField(
            model_name='agency',
            name='longitude',
            field=models.FloatField(blank=True, null=True, verbose_name='Longitude'),
        ),
        migrations.AddField(
            model_name='agency',
            name='service_areas',
            field=models.JSONField(blank=True, default=list, verbose_name='Service Areas'),
        ),
        migrations.AddField(
            model_name='user',
            name='alternate_phone',
            field=phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Alternate phone'),
        ),
        migrations.AddField(
            model_name='user',
            name='average_response_time',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Average Response Time (hours)'),
        ),
        migrations.AddField(
            model_name='user',
            name='communication_preferences',
            field=models.JSONField(blank=True, default=dict, verbose_name='Communication Preferences'),
        ),
        migrations.AddField(
            model_name='user',
            name='cover_photo',
            field=models.ImageField(blank=True, null=True, upload_to='cover_photos/', verbose_name='Cover Photo'),
        ),
        migrations.AddField(
            model_name='user',
            name='facebook_url',
            field=models.URLField(blank=True, null=True, verbose_name='Facebook Profile'),
        ),
        migrations.AddField(
            model_name='user',
            name='instagram_url',
            field=models.URLField(blank=True, null=True, verbose_name='Instagram Profile'),
        ),
        migrations.AddField(
            model_name='user',
            name='languages',
            field=models.JSONField(blank=True, default=list, verbose_name='Languages Spoken'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_seen',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Last Seen'),
        ),
        migrations.AddField(
            model_name='user',
            name='linkedin_url',
            field=models.URLField(blank=True, null=True, verbose_name='LinkedIn Profile'),
        ),
        migrations.AddField(
            model_name='user',
            name='rating',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name='Rating'),
        ),
        migrations.AddField(
            model_name='user',
            name='reviews_count',
            field=models.PositiveIntegerField(default=0, verbose_name='Reviews Count'),
        ),
        migrations.AddField(
            model_name='user',
            name='service_areas',
            field=models.JSONField(blank=True, default=list, verbose_name='Service Areas'),
        ),
        migrations.AddField(
            model_name='user',
            name='twitter_url',
            field=models.URLField(blank=True, null=True, verbose_name='Twitter Profile'),
        ),
        migrations.AddField(
            model_name='user',
            name='years_of_experience',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Years of Experience'),
        ),
        migrations.AddField(
            model_name='useractivitylog',
            name='device_id',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Device ID'),
        ),
        migrations.AlterField(
            model_name='user',
            name='agency_role',
            field=models.CharField(blank=True, choices=[('agent', 'Agent'), ('manager', 'Manager'), ('admin', 'Administrator'), ('owner', 'Owner')], max_length=50, null=True, verbose_name='Agency Role'),
        ),
        migrations.AlterField(
            model_name='user',
            name='notification_preferences',
            field=models.JSONField(blank=True, default=dict, verbose_name='Notification Preferences'),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone_number',
            field=phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='Phone number'),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('customer', 'Customer'), ('admin', 'Admin'), ('agent', 'Agent'), ('agency_admin', 'Agency Admin'), ('agency_staff', 'Agency Staff')], default='customer', max_length=20, verbose_name='Role'),
        ),
        migrations.AlterField(
            model_name='user',
            name='verification_documents',
            field=models.FileField(blank=True, null=True, upload_to='verifications/', verbose_name='Verification Documents'),
        ),
        migrations.AlterField(
            model_name='useractivitylog',
            name='action',
            field=models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('profile_update', 'Profile Update'), ('password_change', 'Password Change'), ('property_view', 'Property View'), ('property_save', 'Property Saved'), ('property_contact', 'Property Contact'), ('agent_contact', 'Agent Contact')], max_length=50, verbose_name='Action'),
        ),
        migrations.CreateModel(
            name='AgentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('professional_title', models.CharField(blank=True, max_length=100, verbose_name='Professional Title')),
                ('certifications', models.TextField(blank=True, verbose_name='Certifications')),
                ('education', models.TextField(blank=True, verbose_name='Education')),
                ('awards', models.TextField(blank=True, verbose_name='Awards & Recognition')),
                ('specialties', models.TextField(blank=True, verbose_name='Specialties')),
                ('testimonial_video', models.URLField(blank=True, verbose_name='Testimonial Video URL')),
                ('office_hours', models.JSONField(blank=True, default=dict, verbose_name='Office Hours')),
                ('appointment_slots', models.JSONField(blank=True, default=list, verbose_name='Available Appointment Slots')),
                ('user', models.OneToOneField(limit_choices_to={'role': 'agent'}, on_delete=django.db.models.deletion.CASCADE, related_name='agent_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Agent Profile',
                'verbose_name_plural': 'Agent Profiles',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='licenses',
            field=models.ManyToManyField(blank=True, to='core.license', verbose_name='Licenses'),
        ),
        migrations.AddField(
            model_name='user',
            name='specializations',
            field=models.ManyToManyField(blank=True, to='core.specialization', verbose_name='Specializations'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['rating'], name='core_user_rating_6af8e0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['years_of_experience'], name='core_user_years_o_d6a09f_idx'),
        ),
        migrations.AddField(
            model_name='userdevice',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfavorite',
            name='agent',
            field=models.ForeignKey(blank=True, limit_choices_to={'role': 'agent'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userfavorite',
            name='property',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='properties.property'),
        ),
        migrations.AddField(
            model_name='userfavorite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL),
        ),
        migrations.DeleteModel(
            name='LoginHistory',
        ),
        migrations.AlterUniqueTogether(
            name='userfavorite',
            unique_together={('user', 'agent'), ('user', 'property')},
        ),
    ]
